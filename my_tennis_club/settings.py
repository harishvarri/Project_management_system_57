"""
Django settings for my_tennis_club project.

Generated by 'django-admin startproject' using Django 5.0.6.
"""

from pathlib import Path
import os
import dj_database_url # Import for robust database configuration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# Use an environment variable for the secret key. Render can generate this for you.
SECRET_KEY = os.environ.get('SECRET_KEY')
# Provide a fallback for local development (NOT FOR PRODUCTION!)
if not SECRET_KEY:
    SECRET_KEY = 'your-very-insecure-local-dev-secret-key-replace-this-in-prod'


# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG based on an environment variable. If 'DEBUG' environment variable is 'True', DEBUG will be True.
# Otherwise, it defaults to False, which is correct for production.
DEBUG = os.environ.get('DEBUG') == 'True'

# ALLOWED_HOSTS configuration
# For Render, you need to allow your Render subdomain (e.g., your-project-name.onrender.com).
# Render automatically provides the RENDER_EXTERNAL_HOSTNAME environment variable.
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
# Add localhost and 127.0.0.1 for local development
ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'demoapp',  # Your custom app(s) - add more here if you have them!
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Essential for serving static files in production on Render
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# IMPORTANT: Replace 'my_tennis_club' with the actual name of your main Django project folder
ROOT_URLCONF = 'my_tennis_club.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # If you have a 'templates' folder in your project root
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# IMPORTANT: Replace 'my_tennis_club' with the actual name of your main Django project folder
WSGI_APPLICATION = 'my_tennis_club.wsgi.application'

# Database
# Use dj_database_url to parse the DATABASE_URL environment variable provided by Render.
# Fallback to SQLite for local development if DATABASE_URL is not set.
DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3', # Default to SQLite for local development
        conn_max_age=600 # Optional: Reconnect to DB after 10 minutes to prevent stale connections
    )
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata' # This is correct for your specified location.
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# STATIC_URL is the URL where static files will be served.
STATIC_URL = '/static/'
# STATIC_ROOT is the absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# STATICFILES_DIRS is a list of additional locations the staticfiles app will check,
# in addition to app-specific 'static/' subdirectories.
# Use this if you have a general 'static' folder in your project root (e.g., my_project/static/).
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# Media files (uploaded by users)
# MEDIA_URL is the URL where user-uploaded media files will be served.
MEDIA_URL = '/media/'
# MEDIA_ROOT is the absolute path to the directory where user-uploaded media files will be stored.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'